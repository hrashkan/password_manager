name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build
        run: cargo build --release --locked

      - name: Build .deb (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          cargo install cargo-deb --locked
          # Reuse previous build artifacts
          cargo deb --no-build
          DEB_PATH=$(ls target/debian/*.deb | head -n1)
          DEB_NAME=$(basename "$DEB_PATH")
          echo "DEB=$DEB_NAME" >> $GITHUB_ENV
          echo "DEB_PATH=$DEB_PATH" >> $GITHUB_ENV

      - name: Package
        shell: bash
        run: |
          set -euo pipefail
          APP=rusty-vault
          VER="${GITHUB_REF_NAME}"
          HOST_TRIPLE=$(rustc -vV | sed -n 's/^host: //p')
          case "${{ runner.os }}" in
            Linux)
              OUT="$APP-$VER-$HOST_TRIPLE.tar.gz"
              tar -C target/release -czf "$OUT" "$APP"
              echo "ASSET=$OUT" >> $GITHUB_ENV
              ;;
            macOS)
              OUT="$APP-$VER-$HOST_TRIPLE.tar.gz"
              tar -C target/release -czf "$OUT" "$APP"
              echo "ASSET=$OUT" >> $GITHUB_ENV
              ;;
            Windows)
              OUT="$APP-$VER-$HOST_TRIPLE.zip"
              powershell -Command "Compress-Archive -Path target/release/$APP.exe -DestinationPath $OUT"
              echo "ASSET=$OUT" >> $GITHUB_ENV
              ;;
          esac

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET }}
          path: ${{ env.ASSET }}

      - name: Upload .deb artifact (Linux)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.DEB }}
          path: ${{ env.DEB_PATH }}

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
